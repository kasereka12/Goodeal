{
  "rules": {
    // Règles globales
    ".read": "auth != null",
    ".write": "auth != null",

    "listings": {
      // Règles pour les annonces
      "$listingId": {
        // Lecture publique uniquement pour les annonces actives
        ".read": "data.child('status').val() === 'active' || (auth != null && data.child('userId').val() === auth.uid)",
        // Écriture uniquement par le propriétaire
        ".write": "auth != null && (!data.exists() || data.child('userId').val() === auth.uid)",
        // Validation des données
        ".validate": "newData.hasChildren(['title', 'description', 'price', 'category', 'userId', 'status', 'createdAt'])",
        "title": { ".validate": "newData.isString() && newData.val().length >= 3" },
        "description": { ".validate": "newData.isString() && newData.val().length >= 10" },
        "price": { ".validate": "newData.isNumber() && newData.val() >= 0" },
        "category": { ".validate": "newData.isString()" },
        "userId": { ".validate": "newData.val() === auth.uid" },
        "status": { ".validate": "newData.isString() && ['active', 'pending', 'sold', 'archived'].includes(newData.val())" },
        "views": { ".validate": "(!data.exists() && newData.val() === 0) || (data.exists() && newData.val() === data.val() + 1)" },
        "favorites": { ".validate": "(!data.exists() && newData.val() === 0) || (data.exists())" }
      }
    },

    "users": {
      // Règles pour les profils utilisateurs
      "$userId": {
        // Lecture publique des informations de base
        ".read": true,
        // Écriture uniquement par l'utilisateur lui-même
        ".write": "auth != null && auth.uid === $userId",
        // Validation des données
        ".validate": "newData.hasChildren(['email', 'createdAt'])",
        "email": { ".validate": "newData.isString() && newData.val().matches(/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/)" },
        "displayName": { ".validate": "!newData.exists() || newData.isString()" },
        "photoURL": { ".validate": "!newData.exists() || newData.isString()" },
        "createdAt": { ".validate": "newData.isNumber()" }
      }
    },

    "favorites": {
      // Règles pour les favoris
      "$userId": {
        // Lecture uniquement par l'utilisateur
        ".read": "auth != null && auth.uid === $userId",
        // Écriture uniquement par l'utilisateur
        ".write": "auth != null && auth.uid === $userId",
        "$listingId": {
          ".validate": "newData.isBoolean()"
        }
      }
    },

    "messages": {
      // Règles pour les messages
      "$messageId": {
        // Lecture uniquement par l'expéditeur et le destinataire
        ".read": "auth != null && (data.child('senderId').val() === auth.uid || data.child('receiverId').val() === auth.uid)",
        // Écriture uniquement par l'expéditeur
        ".write": "auth != null && (!data.exists() || data.child('senderId').val() === auth.uid)",
        // Validation des données
        ".validate": "newData.hasChildren(['senderId', 'receiverId', 'content', 'timestamp'])",
        "senderId": { ".validate": "newData.val() === auth.uid" },
        "content": { ".validate": "newData.isString() && newData.val().length > 0" },
        "timestamp": { ".validate": "newData.isNumber() && newData.val() <= now" }
      }
    }
  }
}